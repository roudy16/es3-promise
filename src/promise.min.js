!function(){function emptyFn(){}function isFn(fn){return fn&&"function"==typeof fn}function isPending(promise){return promise.state===PENDING}function isFulfilled(promise){return promise.state===FULFILLED}function isRejected(promise){return promise.state===REJECTED}function prp(enhancedPromise,x){if(enhancedPromise.promise===x)return void rejectFn(enhancedPromise)(new TypeError("The result of a then execution cannot be the promise itself."));if(!x||"object"!=typeof x&&"function"!=typeof x)resolveFn(enhancedPromise)(x);else{var called=!1;try{var then=x.then;"function"==typeof then?then.apply(x,[function(value){called||(called=!0,prp(enhancedPromise,value))},function(reason){called||(called=!0,rejectFn(enhancedPromise)(reason))}]):resolveFn(enhancedPromise)(x)}catch(err){called||(called=!0,rejectFn(enhancedPromise)(err))}}}function cleanThen(enhancedPromise,enhancedState){var promise=enhancedPromise.promise;if(enhancedState.isStateFn(promise)){for(var stack=enhancedPromise["on"+enhancedState.state];stack.length;){var element=stack.shift(),nextEnhancedPromise=element.nextEnhancedPromise,callback=element.callback,data=promise[enhancedState.dataName];!function(callback,data,nextEnhancedPromise){setTimeout(function(){if(isFn(callback))try{var x;x=callback.apply(void 0,[data]),prp(nextEnhancedPromise,x)}catch(err){rejectFn(nextEnhancedPromise)(err)}else enhancedState.execFn(nextEnhancedPromise)(data)},0)}(callback,data,nextEnhancedPromise)}enhancedPromise["on"+enhancedState.otherState]=[]}}function registerThen(enhancedPromise,nextEnhancedPromise,onFulfillment,onRejection){var promise=enhancedPromise.promise;enhancedPromise.onfulfilled.push({nextEnhancedPromise:nextEnhancedPromise,callback:onFulfillment}),enhancedPromise.onrejected.push({nextEnhancedPromise:nextEnhancedPromise,callback:onRejection}),isFulfilled(promise)?cleanThen(enhancedPromise,enhancedState[FULFILLED]):isRejected(promise)&&cleanThen(enhancedPromise,enhancedState[REJECTED])}function resolveFn(enhancedPromise){var promise=enhancedPromise.promise;return function(value){isPending(promise)&&(promise.state=FULFILLED,promise.value=value,cleanThen(enhancedPromise,enhancedState[FULFILLED]))}}function rejectFn(enhancedPromise){var promise=enhancedPromise.promise;return function(reason){isPending(promise)&&(promise.state=REJECTED,promise.reason=reason,cleanThen(enhancedPromise,enhancedState[REJECTED]))}}function enhancePromise(promise,resolve,reject){return{promise:promise,resolve:resolve,reject:reject,onfulfilled:[],onrejected:[]}}function Promise(executor){if(!(this instanceof Promise))throw new TypeError("Not enough arguments to Promise.");if(!executor||"function"!=typeof executor)throw new TypeError("Argument 1 of Promise.constructor is not an object.");this.state=PENDING;var resolve=void 0,reject=void 0,enhancedPromise=enhancePromise(this,resolve,reject);registry.add(this,enhancedPromise),resolve=resolveFn(enhancedPromise),reject=rejectFn(enhancedPromise),executor.apply(void 0,[resolve,reject])}function then(enhancedPromise,onFulfillment,onRejection){var nextPromise=new Promise(emptyFn);return registerThen(enhancedPromise,registry.getEnhanced(nextPromise),onFulfillment,onRejection),nextPromise}function resolve(value){var promise=new Promise(emptyFn);return promise.state=FULFILLED,promise.value=value,promise}function reject(reason){var promise=new Promise(emptyFn);return promise.state=REJECTED,promise.reason=reason,promise}var PENDING="pending",FULFILLED="fulfilled",REJECTED="rejected",enhancedState={};enhancedState[FULFILLED]={state:FULFILLED,otherState:REJECTED,isStateFn:isFulfilled,execFn:resolveFn,otherExecFn:rejectFn,dataName:"value"},enhancedState[REJECTED]={state:REJECTED,otherState:FULFILLED,isStateFn:isRejected,execFn:rejectFn,otherExecFn:resolveFn,dataName:"reason"};var registry=function(){function add(promise,enhancedPromise){records.push({promise:promise,enhancedPromise:enhancedPromise})}function getEnhanced(promise){for(var i=0;i<records.length;i++){var record=records[i];if(record.promise===promise)return record.enhancedPromise}}var records=[];return{add:add,getEnhanced:getEnhanced}}();return Promise.resolve=resolve,Promise.reject=reject,Promise.prototype.then=function(onFulfillment,onRejection){return then(registry.getEnhanced(this),onFulfillment,onRejection)},{Promise:Promise}}();